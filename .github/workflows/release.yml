name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

    - name: Run benchmarks
      run: go test -bench=. -benchmem -run=^$ ./...

  build-examples:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build examples
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        
        # Build basic example
        go build -o dist/basic-example-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
          examples/basic/main.go
          
        # Build API server example
        go build -o dist/api-server-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
          examples/api-server/main.go
          
        # Build high concurrency example
        go build -o dist/high-concurrency-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
          examples/high-concurrency/main.go
          
        # Build monitoring example
        go build -o dist/monitoring-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
          examples/monitoring/main.go
          
        # Build load tester
        go build -o dist/load-tester-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} \
          tools/load-tester/main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: examples-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build-examples]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Combine all artifacts
        for dir in artifacts/*/; do
          cp -r "$dir"* release-assets/
        done
        
        # Create archives for each platform
        cd release-assets
        for os in linux windows darwin; do
          for arch in amd64 arm64; do
            if [[ "$os" == "windows" && "$arch" == "arm64" ]]; then
              continue
            fi
            
            ext=""
            if [[ "$os" == "windows" ]]; then
              ext=".exe"
            fi
            
            if ls *-${os}-${arch}${ext} 1> /dev/null 2>&1; then
              mkdir -p fastcache-examples-${os}-${arch}
              mv *-${os}-${arch}${ext} fastcache-examples-${os}-${arch}/
              
              if [[ "$os" == "windows" ]]; then
                zip -r fastcache-examples-${os}-${arch}.zip fastcache-examples-${os}-${arch}/
              else
                tar -czf fastcache-examples-${os}-${arch}.tar.gz fastcache-examples-${os}-${arch}/
              fi
              
              rm -rf fastcache-examples-${os}-${arch}/
            fi
          done
        done

    - name: Generate changelog
      run: |
        # Extract tag
        TAG=${GITHUB_REF#refs/tags/}
        echo "TAG=$TAG" >> $GITHUB_ENV
        
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        echo "# Changelog for $TAG" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        
        if [[ -n "$LAST_TAG" ]]; then
          echo "## Changes since $LAST_TAG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD >> CHANGELOG.md
        else
          echo "## Initial Release" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "- Initial release of FastCache" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "## Features" >> CHANGELOG.md
        echo "- High-performance in-memory cache (1M+ QPS)" >> CHANGELOG.md
        echo "- Goroutine-safe operations" >> CHANGELOG.md
        echo "- Automatic memory management with LRU eviction" >> CHANGELOG.md
        echo "- TTL support for automatic expiration" >> CHANGELOG.md
        echo "- Comprehensive monitoring and statistics" >> CHANGELOG.md
        echo "- Production-ready with extensive testing" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo '```bash' >> CHANGELOG.md
        echo "go get github.com/nayan9229/fastcache@$TAG" >> CHANGELOG.md
        echo '```' >> CHANGELOG.md

    - name: Run final tests
      run: |
        # Run a quick smoke test
        go run examples/basic/main.go &
        PID=$!
        sleep 2
        kill $PID || true
        
        echo "‚úÖ Smoke test passed"

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ env.TAG }}
        body_path: CHANGELOG.md
        files: |
          release-assets/*.tar.gz
          release-assets/*.zip
        draft: false
        prerelease: ${{ contains(env.TAG, '-') }}
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Go module proxy
      run: |
        # Trigger Go module proxy update
        curl -X POST "https://proxy.golang.org/github.com/nayan9229/fastcache/@v/${{ env.TAG }}.info" || true

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./examples/docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

  notify:
    runs-on: ubuntu-latest
    needs: [create-release, docker-build]
    if: always()
    steps:
    - name: Notify completion
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "üéâ Release $TAG completed successfully!"
        echo "üì¶ Binaries available at: https://github.com/${{ github.repository }}/releases/tag/$TAG"
        echo "üê≥ Docker image: ghcr.io/${{ github.repository }}:$TAG"
        echo "üìö Documentation: https://godoc.org/github.com/${{ github.repository }}"