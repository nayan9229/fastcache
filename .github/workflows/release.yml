name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      benchmark-results: ${{ steps.benchmark.outputs.results }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race ./...

    - name: Run benchmarks and save results
      id: benchmark
      run: |
        echo "Running benchmarks..."
        go test -bench=. -benchmem -run=^$ ./... > benchmark_results.txt
        
        # Create a formatted benchmark summary
        echo "## 🚀 Benchmark Results" > benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo "Performance benchmarks for this release:" >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        echo '```
        cat benchmark_results.txt >> benchmark_summary.md
        echo '```' >> benchmark_summary.md
        echo "" >> benchmark_summary.md
        
        # Save results as output
        {
          echo 'results<<EOF'
          cat benchmark_results.txt
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          benchmark_results.txt
          benchmark_summary.md

  build-examples:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Build examples
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        
        # Build basic example
        go build -ldflags="-s -w" -o dist/basic-example-${{ matrix.goos }}-${{ matrix.goarch }} \
          examples/basic/main.go
          
        # Build API server example
        go build -ldflags="-s -w" -o dist/api-server-${{ matrix.goos }}-${{ matrix.goarch }} \
          examples/api-server/main.go
          
        # Build high concurrency example
        go build -ldflags="-s -w" -o dist/high-concurrency-${{ matrix.goos }}-${{ matrix.goarch }} \
          examples/high-concurrency/main.go
          
        # Build monitoring example
        go build -ldflags="-s -w" -o dist/monitoring-${{ matrix.goos }}-${{ matrix.goarch }} \
          examples/monitoring/main.go
          
        # Build load tester
        go build -ldflags="-s -w" -o dist/load-tester-${{ matrix.goos }}-${{ matrix.goarch }} \
          tools/load-tester/main.go

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: examples-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  create-release:
    runs-on: ubuntu-latest
    needs: [test, build-examples]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: 1.21

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: "*"
        merge-multiple: false

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Combine all artifacts except benchmark results
        for dir in artifacts/*/; do
          if [[ "$(basename "$dir")" != "benchmark-results" ]] && [ -d "$dir" ]; then
            cp -r "$dir"* release-assets/
          fi
        done
        
        # Create archives for each platform
        cd release-assets
        for os in linux darwin; do
          for arch in amd64 arm64; do
            # Check if any files exist for this platform
            if ls *-${os}-${arch} 1> /dev/null 2>&1; then
              # Create directory name
              dir_name="fastcache-examples-${os}-${arch}"
              
              # Clean up any existing directory
              rm -rf "$dir_name"
              mkdir -p "$dir_name"
              
              # Copy files to avoid subdirectory issue
              for file in *-${os}-${arch}; do
                if [ -f "$file" ]; then
                  cp "$file" "$dir_name"/
                fi
              done
              
              # Create archive
              tar -czf "${dir_name}.tar.gz" "$dir_name"/
              
              # Clean up directory
              rm -rf "$dir_name"
            fi
          done
        done

    - name: Generate comprehensive release notes
      run: |
        # Extract tag
        TAG=${GITHUB_REF#refs/tags/}
        echo "TAG=$TAG" >> $GITHUB_ENV
        
        # Get current date
        RELEASE_DATE=$(date '+%Y-%m-%d')
        
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Start building release notes
        echo "# 🚀 FastCache ${TAG} Release" > RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "_Released on ${RELEASE_DATE}_" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        
        # Add benchmark results if available
        if [ -f "artifacts/benchmark-results/benchmark_summary.md" ]; then
          cat artifacts/benchmark-results/benchmark_summary.md >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
        fi
        
        # Add changelog
        if [[ -n "$LAST_TAG" ]]; then
          echo "## 📝 What's Changed" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commit messages since last tag
          git log --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" $LAST_TAG..HEAD >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Add contributors
          echo "## 👥 Contributors" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- @%an" $LAST_TAG..HEAD | sort -u >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
        else
          echo "## 🎉 Initial Release" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "This is the first release of FastCache - a high-performance, goroutine-safe in-memory cache for Go applications." >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
        fi
        
        # Add features section
        echo "## ✨ Key Features" >> RELEASE_NOTES.md
        echo "" >> RELEASE_NOTES.md
        echo "- 🚀 **High Performance**: 1M+ queries per second" >> RELEASE_NOTES.md
        echo "- 🔒 **Thread Safe**: Goroutine-safe operations with minimal locking" >> RELEASE_NOTES.md
        echo "- 🧠 **Smart Memory Management**: Automatic LRU eviction policy" >> RELEASE_NOTES.md
        echo "- ⏰ **TTL Support**: Automatic expiration with customizable time-to-live" >> RELEASE_NOTES.md
        echo "- 📊 **Comprehensive Monitoring**: Built-in statistics and metrics" >> RELEASE_
